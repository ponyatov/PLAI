%{
#include "hpp.hpp"
string LexString;						/* string parse buffer */
%}
%x lexstring
%option noyywrap yylineno

S [\+\-]?
N [0-9]+
%%
#[^\n]*			{}						/* comment */

^\.end			{yyterminate();}		/* .end directive */

'				{BEGIN(lexstring); LexString="";}
<lexstring>'	{BEGIN(INITIAL); yylval.o = new Str(LexString); return STR;}
<lexstring>\\t	{LexString+='\t';}
<lexstring>\\n	{LexString+='\n';}
<lexstring>\\.	{LexString+=yytext[1];}
<lexstring>.	{LexString+=yytext[0];}

										/* numbers */
{N}				TOC(Num,NUM)				/* integer */
{N}\.{N}		TOC(Num,NUM)				/* point */
{N}[eE]{S}{N}	TOC(Num,NUM)				/* exponential */
0x[0-9a-fA-F]+	TOC(Num,NUM)				/* hex machine integer */
0b[01]+			TOC(Num,NUM)				/* binary string */

\(				TOC(Op,LP)				/* brackets */
\)				TOC(Op,RP)
\[				TOC(Op,LQ)
\]				TOC(Op,RQ)
\{				TOC(Op,LC)
\}				TOC(Op,RC)

\+				TOC(Op,ADD)				/* operators */
\-				TOC(Op,SUB)
\*				TOC(Op,MUL)
\/				TOC(Op,DIV)
\^				TOC(Op,POW)

\=				TOC(Op,EQ)
\@				TOC(Op,AT)
\~				TOC(Op,TILD)
\:				TOC(Op,COLON)

[a-zA-Z0-9_.?]+	TOC(Sym,SYM)			/* symbol */

[ \t\r\n]+		{}						/* drop spaces */
.				{yyerror("lexer");}		/* undetected char */
