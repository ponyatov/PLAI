%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }
%token <o> SYM NUM STR				/* symbol number 'string'	*/
%token <o> ADD SUB MUL DIV POW		/* + - * / ^ 				*/
%token <o> LP RP LQ RQ LC RC		/* () [] {}					*/
%token <o> EQ AT TILD COLON			/* = @ ~ :					*/
%type <o> ex scalar vector lambda

%right EQ
%left AT
%left ADD SUB
%left MUL DIV
%left POW
%left PFX
%left TILD
%%
REPL : | REPL ex 			{ cout << $2->dump() << endl; } ;
scalar : SYM | NUM | STR ;
ex : scalar
	| LP ex RP				{ $$=$2; }
	| LQ vector RQ			{ $$=$2; }
	| LC lambda RC			{ $$=$2; }
	| TILD ex				{ $$=$1; $$->push($2); }
	| ex EQ ex				{ $$=$2; $$->push($1); $$->push($3); }
	| ex AT ex				{ $$=$2; $$->push($1); $$->push($3); }
	| ADD ex %prec PFX		{ $$=$1; $$->push($2); }
	| SUB ex %prec PFX		{ $$=$1; $$->push($2); }
	| ex ADD ex				{ $$=$2; $$->push($1); $$->push($3); }
	| ex SUB ex				{ $$=$2; $$->push($1); $$->push($3); }
	| ex MUL ex				{ $$=$2; $$->push($1); $$->push($3); }
	| ex DIV ex				{ $$=$2; $$->push($1); $$->push($3); }
	| ex POW ex				{ $$=$2; $$->push($1); $$->push($3); }
;
vector :					{ $$=new Vector(); }
	| vector ex				{ $$=$1; $$->push($2); }
;
lambda :					{ $$=new Lambda(); }
	| lambda SYM COLON		{ $$=$1; $$->lookup[$2->val]=$3; }
	| lambda ex				{ $$=$1; $$->push($2); }
;

