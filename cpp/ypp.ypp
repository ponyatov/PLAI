%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }
%token <o> SYM NUM STR				// symbol number string
%token <o> LP RP LQ RQ LC RC		// (expression) [vector] {lambda}
%token <o> EQ						// =
%token <o> ADD SUB MUL DIV POW		// + - * / ^
%type <o> ex scalar vector

%right EQ
%left ADD SUB
%left MUL DIV
%left POW
%left PFX
%%
REPL : | REPL ex			 { cout << $2->eval()->dump() << endl; };
scalar : SYM | NUM | STR ;
ex : scalar
	| LQ vector RQ			{ $$=$2; }
	| ex EQ ex				{ $$=$2; $$->push($1); $$->push($3); }
	| ADD ex %prec PFX		{ $$=$1; $$->push($1); }
	| ex ADD ex				{ $$=$2; $$->push($1); $$->push($3); }
	| SUB ex %prec PFX		{ $$=$1; $$->push($1); }
	| ex SUB ex				{ $$=$2; $$->push($1); $$->push($3); }
	| ex MUL ex				{ $$=$2; $$->push($1); $$->push($3); }
	| ex DIV ex				{ $$=$2; $$->push($1); $$->push($3); }
	| ex POW ex				{ $$=$2; $$->push($1); $$->push($3); }
;
vector:						{ $$=new Vector(); }
	| vector ex				{ $$=$1; $$->push($2); }
;
