
files
% src.src
% log.log
% ( core
	% ypp.ypp
	% lpp.lpp
	% hpp.hpp
	% cpp.cpp
	% Makefile
)
% .gitignore
% bat.bat

ypp.ypp % [

include % hpp.hpp
[ %defines % ( %union % 'Sym*':o ) ]
%token %( <o>
	% SYM " symbol "
	% NUM " number "
	% STR " 'string' "
)
[ %token % <o> LP RP LQ RQ LC RC		/* (expr) [vector] {la:mbda}	*/ ]
[ %type <o> ex scalar vector		/* expression scalar [vector]	*/ ]
%%
REPL : | REPL ex 			{ cout << $2->dump() << endl; };
scalar : SYM | NUM | STR ;
ex : scalar
	| LQ vector RQ			{ $$=$2; }
	| ex EQ ex				{ $$=$2; $$->push($1); $$->push($3); }
;
vector :					{ $$=new Vector(); }
	| vector ex				{ $$=$1; $$->push($2); }
;

]

lpp.lpp = [

%{
#include "hpp.hpp"
%}
%option noyywrap yylineno
%%
#[^\n]*			{}						/* comment */

\(				TOC(Op,LP)				/* brackets */
\)				TOC(Op,RP)
\[				TOC(Op,LQ)
\]				TOC(Op,RQ)
\{				TOC(Op,LC)
\}				TOC(Op,RC)

\=				TOC(Op,EQ)				/* operators */

[a-zA-Z0-9_.]+	TOC(Sym,SYM)			/* symbol */

%[{}]			TOC(Sym,SYM)			/* misc */

[ \t\r\n]+		{}
.				{yyerror("lexer");}
]

hpp.hpp = [

#ifndef _H_HPP
#define _H_HPP

#include <iostream>
#include <cstdlib>
#include <vector>
#include <map>
using namespace std;

struct Sym {
	string val;
	Sym(string);
	vector<Sym*> nest; void push(Sym*);
	virtual string head(); string pad(int); virtual string dump(int=0);
};

struct Vector:Sym { Vector(); string head(); };

struct Op:Sym { Op(string); string head(); };

extern int yylex();
extern int yylineno;
extern char* yytext;
#define TOC(C,X) { yylval.o = new C(yytext); return X; }
extern int yyparse();
extern void yyerror(string);
#include "ypp.tab.hpp"

#endif // _H_HPP

]

cpp.cpp = [

#include "hpp.hpp"
#define YYERR "\n\n"<<yylineno<<":"<<msg<<"["<<yytext<<"]\n\n"
void yyerror(string msg) { cout<<YYERR; cerr<<YYERR; exit(-1); }
int main() { return yyparse(); }

Sym::Sym(string V) { val=V; }
void Sym::push(Sym*o) { nest.push_back(o); }

string Sym::head() { return "<"+val+">"; }
string Sym::pad(int n) { string S; for (int i=0;i<n;i++) S+='\t'; return S; }
string Sym::dump(int depth) { string S = "\n"+pad(depth)+head();
	for (auto it=nest.begin(),e=nest.end();it!=e;it++)
		S += (*it)->dump(depth+1);
	return S; }

Vector::Vector():Sym("[]"){}
string Vector::head() { return val; }

Op::Op(string V):Sym(V){}
string Op::head() { return val; }

]

Makefile = [

log.log: src.src ./exe.exe
	./exe.exe < $< > $@ && tail $(TAIL) $@
C = cpp.cpp ypp.tab.cpp lex.yy.c
H = hpp.hpp ypp.tab.hpp
CXXFLAGS += -std=gnu++11
./exe.exe: $(C) $(H)
	$(CXX) $(CXXFLAGS) -o $@ $(C)
ypp.tab.cpp: ypp.ypp
	bison $<
lex.yy.c: lpp.lpp
	flex $<

]

.gitignore = [

*~
*.swp
exe.exe
log.log
ypp.tab.?pp
lex.yy.c

]

bat.bat = [ @gvim -p files ]

